{"abi":[{"type":"function","name":"verifyAttestation","inputs":[{"name":"attestation","type":"tuple","internalType":"struct Attestation","components":[{"name":"recipient","type":"address","internalType":"address"},{"name":"request","type":"tuple","internalType":"struct AttNetworkRequest","components":[{"name":"url","type":"string","internalType":"string"},{"name":"header","type":"string","internalType":"string"},{"name":"method","type":"string","internalType":"string"},{"name":"body","type":"string","internalType":"string"}]},{"name":"reponseResolve","type":"tuple[]","internalType":"struct AttNetworkResponseResolve[]","components":[{"name":"keyName","type":"string","internalType":"string"},{"name":"parseType","type":"string","internalType":"string"},{"name":"parsePath","type":"string","internalType":"string"}]},{"name":"data","type":"string","internalType":"string"},{"name":"attConditions","type":"string","internalType":"string"},{"name":"timestamp","type":"uint64","internalType":"uint64"},{"name":"additionParams","type":"string","internalType":"string"},{"name":"attestors","type":"tuple[]","internalType":"struct Attestor[]","components":[{"name":"attestorAddr","type":"address","internalType":"address"},{"name":"url","type":"string","internalType":"string"}]},{"name":"signatures","type":"bytes[]","internalType":"bytes[]"}]}],"outputs":[],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"verifyAttestation((address,(string,string,string,string),(string,string,string)[],string,string,uint64,string,(address,string)[],bytes[]))":"0f8bbf00"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"header\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"body\",\"type\":\"string\"}],\"internalType\":\"struct AttNetworkRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"keyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parseType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parsePath\",\"type\":\"string\"}],\"internalType\":\"struct AttNetworkResponseResolve[]\",\"name\":\"reponseResolve\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attConditions\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"additionParams\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"attestorAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct Attestor[]\",\"name\":\"attestors\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"verifyAttestation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of PrimusZKTLS, which defines functions for handling attestations and related operations.\",\"kind\":\"dev\",\"methods\":{\"verifyAttestation((address,(string,string,string,string),(string,string,string)[],string,string,uint64,string,(address,string)[],bytes[]))\":{\"details\":\"Verifies the validity of a given attestation.  This includes checking the signature of attestor,  the integrity of the data, and the attestation's consistency.\",\"params\":{\"attestation\":\"The attestation data to be verified.  It contains details about the recipient, request, response, and attestors. Requirements: - The attestation must have valid signatures from all listed attestors. - The data must match the provided request and response structure. - The attestation must not be expired (based on its timestamp). Emits no events.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IPrimusZKTLS.sol\":\"IPrimusZKTLS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/IPrimusZKTLS.sol\":{\"keccak256\":\"0x3c2cd70f4a6256d4d54115ea1bafcb974cf3c44d99894540c7a9d3dce232c19b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e64f007c886bf6023a97ed26fccba6727f282056275adadbaefc5832148e05c3\",\"dweb:/ipfs/Qmcha86eZYhCSnJNNZtUqHK9ktGiLpE7QYV1LohABiJskZ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct Attestation","name":"attestation","type":"tuple","components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"struct AttNetworkRequest","name":"request","type":"tuple","components":[{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"header","type":"string"},{"internalType":"string","name":"method","type":"string"},{"internalType":"string","name":"body","type":"string"}]},{"internalType":"struct AttNetworkResponseResolve[]","name":"reponseResolve","type":"tuple[]","components":[{"internalType":"string","name":"keyName","type":"string"},{"internalType":"string","name":"parseType","type":"string"},{"internalType":"string","name":"parsePath","type":"string"}]},{"internalType":"string","name":"data","type":"string"},{"internalType":"string","name":"attConditions","type":"string"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"string","name":"additionParams","type":"string"},{"internalType":"struct Attestor[]","name":"attestors","type":"tuple[]","components":[{"internalType":"address","name":"attestorAddr","type":"address"},{"internalType":"string","name":"url","type":"string"}]},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}]}],"stateMutability":"view","type":"function","name":"verifyAttestation"}],"devdoc":{"kind":"dev","methods":{"verifyAttestation((address,(string,string,string,string),(string,string,string)[],string,string,uint64,string,(address,string)[],bytes[]))":{"details":"Verifies the validity of a given attestation.  This includes checking the signature of attestor,  the integrity of the data, and the attestation's consistency.","params":{"attestation":"The attestation data to be verified.  It contains details about the recipient, request, response, and attestors. Requirements: - The attestation must have valid signatures from all listed attestors. - The data must match the provided request and response structure. - The attestation must not be expired (based on its timestamp). Emits no events."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/IPrimusZKTLS.sol":"IPrimusZKTLS"},"evmVersion":"paris","libraries":{}},"sources":{"src/IPrimusZKTLS.sol":{"keccak256":"0x3c2cd70f4a6256d4d54115ea1bafcb974cf3c44d99894540c7a9d3dce232c19b","urls":["bzz-raw://e64f007c886bf6023a97ed26fccba6727f282056275adadbaefc5832148e05c3","dweb:/ipfs/Qmcha86eZYhCSnJNNZtUqHK9ktGiLpE7QYV1LohABiJskZ"],"license":"MIT"}},"version":1},"id":44}